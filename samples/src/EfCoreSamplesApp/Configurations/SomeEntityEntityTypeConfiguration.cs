using EfCoreSamplesApp.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.ValueGeneration;

public class SomeEntityEntityTypeConfiguration : IEntityTypeConfiguration<SomeEntity>
{
    public void Configure( EntityTypeBuilder<SomeEntity> builder )
    {
        // Table
        builder.ToTable( name: "Blogs", schema: "dbo", tableBuilder =>
        {
            tableBuilder.HasComment( "Blogs are here" );
            tableBuilder.ExcludeFromMigrations();
            tableBuilder.IsMemoryOptimized();               // Entire table resides in memory
            tableBuilder.IsTemporal();                      // Keep track of all data ever stored in a table
            tableBuilder.HasCheckConstraint( "CK_Blogs_Url", "Url LIKE '%xyz%'" );
            tableBuilder.HasCheckConstraint( "CK_Prices", "[Price] > [DiscountedPrice]" );

            // List
            tableBuilder.HasCheckConstraint( "CK_TABLENAME_COLUMNNAME_Url", "\"COLUMNNAME\" ~ '^(http://|https://|ftp://)'" );
            tableBuilder.HasCheckConstraint( "CK_TABLENAME_COLUMNNAME_CreditCard", """COLUMNNAME" ~ '^[\d- ]*$'""" );
            tableBuilder.HasCheckConstraint( "CK_TABLENAME_COLUMNNAME_EmailAddress", """COLUMNNAME" ~ '^[^@]+@[^@]+$'""" );
            tableBuilder.HasCheckConstraint( "CK_TABLENAME_COLUMNNAME_MinLength", """LENGTH("COLUMNNAME") >= 4""" );
            tableBuilder.HasCheckConstraint( "CK_TABLENAME_COLUMNNAME_Range", """COLUMNNAME" >= 1 AND "COLUMNNAME" <= 5""" );
            tableBuilder.HasCheckConstraint( "CK_TABLENAME_COLUMNNAME_RegEx_StartsWithA", """StartsWithA" ~ '^A'""" );


            tableBuilder.HasTrigger( "SomeTrigger" );       // Let EF Core know that the target table has a trigger; doing so will revert to the previous, less efficient technique for Save Changes operations
        } );


        // View
        // Assume that the referenced view already exists in the database
        // Not created in a migration
        builder.ToView( "BlogsView", schema: "dbo" );


        // Table-valued function (TVF)
        // Sql : CREATE FUNCTION dbo.BlogsWithXYZ() RETURNS TABLE AS RETURN SELECT * FROM dbo.Blogs WHERE Url LIKE '%xyz%';
        // Function must be parameterless.
        builder.HasNoKey()
               .ToFunction( "BlogsWithXYZ" );


        // Primary Key
        // Default
        // int, long, Guid have their value generated by the database (Identity)
        // If a key property has its value generated by the database and a non-default value is specified when an entity is added, then EF will assume that the entity already exists in the database and will try to update it instead of inserting a new one
        builder.HasKey( x => x.SomeEntityId )
               .HasName( "PK_<type name>" )  // Primary key constraint
               .IsClustered( true );

        builder.HasKey( x => x.SocialSecurityNumber );
        builder.HasKey( x => new { x.Country, x.State } );  // Composite key


        // Indexes
        builder.HasIndex( x => x.Url )
               .HasFilter( "[Url] IS NOT NULL" )
               .HasFilter( null )
               .HasFillFactor( 10 )
               .IsClustered( false )
               .IsUnique()
               .IsDescending()
               .IsCreatedOnline();


        // Properties
        // All public properties with get; set; are included by default.
        builder.Ignore( b => b.Url );


        builder.Property( x => x.Url )
               .HasColumnName( "_url" )
               .HasMaxLength( 150 );

        // Column type
        // string (key)   -> nvarchar(450)
        // string         -> nvarchar(max)
        // DateTime       -> datetime2(7)


        // Entity Framework does not do any validation of maximum length before passing data
        // Entity Framework does not do any validation of precision or scale before passing data
        builder.Property( x => x.SomeProperty )

               .HasColumnType( "nvarchar(max)" )  // default for string
               .HasColumnType( "datetime2(7)" )   // default for DateTime
               .HasColumnType( "varchar(200)" )   // default for DateTime
               .HasColumnType( "decimal(5, 2)" )  // default for DateTime

               .HasMaxLength( 500 )

               .HasPrecision( 14, 2 )
               .HasPrecision( 3 )

               .IsUnicode( false )               // SqlServer  varchar(x) -> Non Unicode UTF-8
               .IsUnicode( true )                // SqlServer nvarchar(x) -> Unicode     UTF-16

               .IsRequired( true )               // NOT NULL            int, bool  , string
               .IsRequired( false )              // NULL (Optional)     int?, bool?, string?

               .UseCollation( "Latin1_General_CI_AS" )
               .UseCollation( "SQL_Latin1_General_CP1_CI_AS" )

               .HasColumnOrder( 2 )             // On creation, the column will be placed after the column with the specified order.

               // Values
               .HasDefaultValue( 3 )
               .HasDefaultValueSql( "getdate()" )

               .HasComputedColumnSql( "[LastName] + ', ' + [FirstName]" )
               .HasComputedColumnSql( "LEN([LastName]) + LEN([FirstName])", stored: true )

               .ValueGeneratedNever()
               .ValueGeneratedOnAdd()
               .ValueGeneratedOnAddOrUpdate()
               //.Metadata.SetAfterSaveBehavior( PropertySaveBehavior.Save )


               .UseIdentityColumn( seed: 1, increment: 1 )
               .HasDefaultValueSql( "NEXT VALUE FOR OrderNumbers" ) // modelBuilder.HasSequence<int>( "OrderNumbers", schema: "shared" ).StartsAt( 1000 ).IncrementBy( 5 );
               .HasValueGenerator( typeof( SequentialGuidValueGenerator ) )   // GUID



               .HasComment( "This is a comment" );






        // Properties
        //builder.Property( b => b.BlogId )
        //       .HasColumnName( "BlogId" )
        //       .HasColumnType( "int" )
        //       .HasDefaultValue( 1 )
        //       .HasDefaultValueSql( "NEXT VALUE FOR dbo.BlogId" )
        //       .HasMaxLength( 10 )

        //       .HasPrecision( precision: 10, scale: 0 )
        //       .HasColumnOrder( 1 )
        //       .HasComment( "Primary key for Blog objects." )
        //       .HasField( "_blogId" )
        //       .UseIdentityColumn( seed: 1, increment: 1 )

        //       .IsConcurrencyToken()
        //       .IsRequired()
        //       .IsRowVersion()
        //       .ValueGeneratedOnAdd();   // ValueGeneratedOnAdd is the default for primary key properties, but we're being explicit here.
        //                                 //.ValueGeneratedNever(); // ValueGeneratedNever is the default for non-key properties, but we're being explicit here.

        //builder.HasChangeTrackingStrategy( ChangeTrackingStrategy.Snapshot );

        // Data seeding
        builder.HasData( new Blog { BlogId = 1, Url = "http://sample.com" } );

        //builder.HasIndex();


        // Relationships
        //builder.HasMany( b => b.Posts )
        //       .WithOne( p => p.Blog )
        //       .HasForeignKey( p => p.BlogId )
        //       .OnDelete( DeleteBehavior.Cascade ) // Cascade, ClientCascade, ClientNoAction, ClientSetNull, NoAction, Restrict, SetNull
        //       .IsRequired();

    }
}


// https://stackoverflow.com/questions/63726747/entity-framework-core-using-stored-procedure-to-delete-entity-with-bool-return